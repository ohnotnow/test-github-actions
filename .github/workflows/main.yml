name: ci

on:
  push:
    branches: main

env:
  PROD_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-prod:${{ github.sha }}
  QA_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-qa:${{ github.sha }}
  LATEST_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

jobs:
  build-qa-image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Echo some env variables
        run: echo "${LATEST_IMAGE_NAME} ${QA_IMAGE_NAME}"

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          target: ci
          platforms: linux/amd64,linux/arm/v7
          push: true
          build-args: PHP_VERSION=${{ secrets.PHP_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            $LATEST_IMAGE_NAME
            $QA_IMAGE_NAME

  test:
    needs: build-qa-image
    runs-on: ubuntu-latest
    container:
      image: ohffs/${{ github.event.repository.name }}-qa:${{ github.sha }}
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: phpunit
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      -
        name: phpunit
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          cd /var/www/html/
          rm -f .env
          cp -f .env.gitlab .env
          php artisan key:generate
          ./vendor/bin/phpunit

  build-prod-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          target: prod
          platforms: linux/amd64,linux/arm/v7
          push: true
          build-args: PHP_VERSION=${{ secrets.PHP_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            ${PROD_IMAGE_NAME}

  # deploy-prod-image:
  #   runs-on: ubuntu-latest
  #   needs: build-prod-image
  #   env:
  #     DOCKER_HOST=ssh://${{ secrets.PROD_USERNAME }}@${{ secrets.PROD_SERVER }}
  #     IMAGE_NAME="${PROD_IMAGE_NAME}"
  #     DEPLOY_SERVER=${{ secrets.PROD_SERVER }}
  #     DEPLOY_SSH_KEY=${{ secrets.PROD_SSH_KEY }}
  #     DEPLOY_DOTENV=${{ secrets.PROD_DOTENV }}
  #     REPO_NAME=${{ github.event.repository.name }}
  #     STACK_NAME=${{ secrets.PROD_STACK_NAME }}
  #     STACK_FILE=prod-stack.yml
  #     SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v2
  #     -
  #       name: deploy
  #       run: docker/deploy.sh
