name: ci

on:
  push:
    branches: main


jobs:
  build-qa-image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          target: ci
          platforms: linux/amd64,linux/arm/v7
          push: true
          build-args: PHP_VERSION=${{ secrets.PHP_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-qa:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-qa:${{ github.sha }}

  test:
    needs: build-qa-image
    runs-on: ubuntu-latest
    container:
      image: uogsoe/${{ github.repository }}-qa:${{ github.sha }}
    steps:
      -
        name: phpunit
        run: |
          cd /var/www/html/
          rm -f .env
          cp -f .env.gitlab .env
          php artisan key:generate
          ./vendor/bin/phpunit

  build-prod-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          target: prod
          platforms: linux/amd64,linux/arm/v7
          push: true
          build-args: PHP_VERSION=${{ secrets.PHP_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-prod:${{ github.sha }}

  # deploy-prod-image:
  #   runs-on: ubuntu-latest
  #   needs: build-prod-image
  #   run: |
  #     eval $(ssh-agent -s)
  #     mkdir ~/.ssh
  #     chmod 700 ~/.ssh
  #     ssh-keyscan ${{ secrets.PROD_SERVER }} > ~/.ssh/known_hosts
  #     chmod 644 ~/.ssh/known_hosts
  #     echo "${{ secrets.PROD_SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
  #     export NOW=`date +%Y-%m-%d-%H-%M-%S`
  #     export DOTENV_NAME="${{ github.event.repository.name }}-prod-dotenv-${NOW}"
  #     export DOCKER_HOST=ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.PROD_SERVER }}
  #     echo "${{ secrets.PROD_DOTENV }}" | docker secret create ${DOTENV_NAME} -
